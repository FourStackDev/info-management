package org.fourstack.infomanagement.utils;

import java.util.Arrays;
import java.util.List;

import org.fourstack.infomanagement.codetype.FluencyType;
import org.fourstack.infomanagement.codetype.Proficiency;
import org.fourstack.infomanagement.models.Address;
import org.fourstack.infomanagement.models.ContactInfo;
import org.fourstack.infomanagement.models.Language;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Class which is used to generate the Entities that are required for the test
 * cases.
 * <p>
 * Single Entities required for the Test case are generated by JavaCode, but the
 * list of entities will be generated by using the ObjectMapper
 * </p>
 * 
 * @author Manjunath HM
 *
 */
public class EntityGenerator {
	private static ObjectMapper mapper;
	static {
		mapper = new ObjectMapper();
	}

	public static Language getLanguageForId(Long id) {
		Language language = getLanguage();
		language.setId(id);
		return language;
	}

	public static Language getLanguage() {
		Language language = new Language("Kannada", Proficiency.EXPERT,
				Arrays.asList(FluencyType.SPEAK, FluencyType.READ, FluencyType.WRITE));
		return language;
	}

	public static List<Language> getLanguageList() {
		Language[] languages = {};
		try {
			languages = mapper.readValue(CommonUtils.getFileContent("json-files/language-list.json"), Language[].class);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}

		return Arrays.asList(languages);
	}

	public static Address getAddress() {
		Address address = new Address();
		address.setDoorNo("#154");
		address.setAddressLine1("3rd cross, 15th main");
		address.setAddressLine2("Malleswaram");
		address.setTaluk("Bengaluru North");
		address.setDistrict("Bengaluru");
		address.setState("Karnataka");
		address.setCountry("India");
		address.setPincode("560003");
		return address;
	}

	public static Address getAddressForId(Long id) {
		Address address = getAddress();
		address.setId(id);
		return address;
	}

	public static List<Address> getAddressList() {
		Address[] addresses = {};
		try {
			addresses = mapper.readValue(CommonUtils.getFileContent("json-files/address-list.json"), Address[].class);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return Arrays.asList(addresses);
	}
	
	public static ContactInfo getContactInfo() {
		ContactInfo contactInfo = new ContactInfo("9876543210", "8769541239", "contact-need@gmail.com");
		return contactInfo;
	}
	
	public static ContactInfo getContactInfoForId(Long id) {
		ContactInfo contactInfo = getContactInfo();
		contactInfo.setId(id);
		return contactInfo;
	}
	public static List<ContactInfo> getContactInfoList() {
		ContactInfo[] contacts = {};
		try {
			contacts = mapper.readValue(CommonUtils.getFileContent("json-files/contact-info-list.json"), ContactInfo[].class);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return Arrays.asList(contacts);
	}
}
