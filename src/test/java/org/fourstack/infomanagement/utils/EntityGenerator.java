package org.fourstack.infomanagement.utils;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.fourstack.infomanagement.codetype.CourseType;
import org.fourstack.infomanagement.codetype.FluencyType;
import org.fourstack.infomanagement.codetype.GenderType;
import org.fourstack.infomanagement.codetype.MaritalStatus;
import org.fourstack.infomanagement.codetype.Proficiency;
import org.fourstack.infomanagement.models.Address;
import org.fourstack.infomanagement.models.ContactInfo;
import org.fourstack.infomanagement.models.EducationDetail;
import org.fourstack.infomanagement.models.Language;
import org.fourstack.infomanagement.models.Person;
import org.fourstack.infomanagement.models.ProfessionalInfo;
import org.fourstack.infomanagement.models.ProfessionalSkill;
import org.fourstack.infomanagement.models.ProjectDetail;
import org.fourstack.infomanagement.models.Technology;
import org.fourstack.infomanagement.models.WorkExperience;
import org.fourstack.infomanagement.payload.PersonalProfessionalInfoPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Utility Class which is used to generate the Entities that are required for
 * the test cases.
 * <p>
 * Single Entities required for the Test case are generated by JavaCode, but the
 * list of entities will be generated by using the ObjectMapper
 * </p>
 * 
 * @author Manjunath HM
 *
 */
public class EntityGenerator {
	private static Logger logger = LoggerFactory.getLogger(EntityGenerator.class);

	private static ObjectMapper mapper;
	static {
		mapper = new ObjectMapper();
	}

	/**
	 * Generates and returns the Language entity for the specified Id. Language
	 * Object generated by this method will have id attached to it.
	 * 
	 * @param id Unique id(Long value) for the Object
	 * @return Language object.
	 */
	public static Language getLanguage(Long id) {
		Language language = getLanguage();
		language.setId(id);
		return language;
	}

	/**
	 * Generates and returns the Language entity without an id.
	 * 
	 * @return Language Object without id
	 */
	public static Language getLanguage() {
		Language language = new Language("Kannada", Proficiency.EXPERT,
				Arrays.asList(FluencyType.SPEAK, FluencyType.READ, FluencyType.WRITE));
		return language;
	}

	/**
	 * Generates and returns list of language Objects. The Objects will be generated
	 * from the json file by using the Jackson Object mapper.<br/>
	 * If json file is missing or the content inside the file is matching with the
	 * Language object then this method generates an Exception.
	 * 
	 * @return List of Language Objects
	 */
	public static List<Language> getLanguageList() {
		Language[] languages = {};
		try {
			languages = mapper.readValue(CommonUtils.getFileContent("json-files/language-list.json"), Language[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of Language Objects", e);
		}

		return Arrays.asList(languages);
	}

	/**
	 * Generates and returns the Address entity without an id.
	 * 
	 * @return Address Object without id.
	 */
	public static Address getAddress() {
		Address address = new Address();
		address.setDoorNo("#154");
		address.setAddressLine1("3rd cross, 15th main");
		address.setAddressLine2("Malleswaram");
		address.setTaluk("Bengaluru North");
		address.setDistrict("Bengaluru");
		address.setState("Karnataka");
		address.setCountry("India");
		address.setPincode("560003");
		return address;
	}

	/**
	 * Generates and returns the Address entity for the specified Id. Address Object
	 * generated by this method will have id attached to it.
	 * 
	 * @param id Unique id(Long value) for the Object
	 * @return Address Object
	 */
	public static Address getAddress(Long id) {
		Address address = getAddress();
		address.setId(id);
		return address;
	}

	/**
	 * Generates and returns list of Address Objects. The Objects will be generated
	 * from the json file by using the Jackson Object mapper.<br/>
	 * If json file is missing or the content inside the file is matching with the
	 * Address object then this method generates an Exception.
	 * 
	 * @return List of Address Objects
	 */
	public static List<Address> getAddressList() {
		Address[] addresses = {};
		try {
			addresses = mapper.readValue(CommonUtils.getFileContentUsingResource("json-files/address-list.json",
					EntityGenerator.class.getClassLoader()), Address[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of Address Objects", e);
		}
		return Arrays.asList(addresses);
	}

	/**
	 * Generates and Returns the {@link ContactInfo} Object. Generated Object will
	 * not have Id.
	 * 
	 * @return ContactInfo Object
	 */
	public static ContactInfo getContactInfo() {
		ContactInfo contactInfo = new ContactInfo("9876543210", "8769541239", "contact-need@gmail.com");
		return contactInfo;
	}

	/**
	 * Generates and Returns {@link ContactInfo} Object with specified Id.
	 * 
	 * @param id Id for the Object.
	 * @return ContactInfo Object.
	 */
	public static ContactInfo getContactInfo(Long id) {
		ContactInfo contactInfo = getContactInfo();
		contactInfo.setId(id);
		return contactInfo;
	}

	/**
	 * Generates List of {@link ContactInfo} Objects. Objects list will be generated
	 * by using the contact-info-list.json.
	 * 
	 * @return List of ContactInfo Objects.
	 */
	public static List<ContactInfo> getContactInfoList() {
		ContactInfo[] contacts = {};
		try {
			contacts = mapper.readValue(CommonUtils.getFileContent("json-files/contact-info-list.json"),
					ContactInfo[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of ContactInfo Objects", e);
		}
		return Arrays.asList(contacts);
	}

	/**
	 * Generates and Returns {@link Person} Object. Generated Object will not have
	 * Id.
	 * 
	 * @return Person Object.
	 */
	public static Person getPerson() {
		Person person = new Person();
		person.setFirstName("Manjunath");
		person.setLastName("HM");
		person.setDateOfBirth(LocalDate.of(1992, 02, 10));
		person.setFatherName("Munikrishnappa");
		person.setMotherName("Jayalakshmamma");
		person.setGender(GenderType.MALE);
		person.setMaritalStatus(MaritalStatus.SEPATARED);
		person.setAddress(getAddress());
		person.setContactInfo(getContactInfo());
		person.setLanguages(getLanguageList());

		return person;
	}

	/**
	 * Generates and Returns the {@link Person} Object with Specified Id.
	 * 
	 * @param id Id for the Object.
	 * @return Person Object.
	 */
	public static Person getPerson(Long id) {
		Person person = getPerson();
		person.setId(id);

		return person;
	}

	/**
	 * Generates and Returns List of {@link Person} Objects. The List generated by
	 * using the person-info-list.json
	 * 
	 * @return List of Person Objects.
	 */
	public static List<Person> getPersonList() {
		Person[] persons = {};
		try {
			persons = mapper.readValue(CommonUtils.getFileContentUsingResourceStream("json-files/person-info-list.json",
					EntityGenerator.class.getClassLoader()), Person[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of Person Objects", e);
		}

		return Arrays.asList(persons);
	}

	/**
	 * Generates and Returns {@link EducationDetail} Object. Generated Object will
	 * not have Id.
	 * 
	 * @return EducationDetail Object.
	 */
	public static EducationDetail getEducationDetail() {
		EducationDetail education = new EducationDetail();
		education.setCourseName("B.E");
		education.setCollgeName("Dr. Ambedkar Institute of Technology");
		education.setCourseType(CourseType.FULL_TIME);
		education.setPassOutYear("2015");
		education.setUniversityName("VTU(Visvesvaraya Technological University)");

		return education;
	}

	/**
	 * Generates and Returns the {@link EducationDetail} Object with specified Id.
	 * 
	 * @param id Id for the Object
	 * @return EducationDetail Object.
	 */
	public static EducationDetail getEducationDetail(Long id) {
		EducationDetail education = getEducationDetail();
		education.setId(id);
		return education;
	}

	/**
	 * Generates and Returns List of {@link EducationDetail} Objects. List will be
	 * generated by using education-details-list.json.
	 * 
	 * @return List of EducationDetails Object.
	 */
	public static List<EducationDetail> getEducationDetailList() {
		EducationDetail[] educationList = {};
		try {
			educationList = mapper.readValue(CommonUtils.getFileContent("json-files/education-details-list.json"),
					EducationDetail[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of EducationDetail Objects", e);
		}

		return Arrays.asList(educationList);
	}

	/**
	 * Generates and Returns {@link ProfessionalSkill} Object. Generated Object will
	 * not have Id.
	 * 
	 * @return ProfessionalSkill Object.
	 */
	public static ProfessionalSkill getProfessionalSkill() {
		ProfessionalSkill skill = new ProfessionalSkill();
		skill.setName("Java");
		skill.setProficiency(Proficiency.PROFICIENT);

		return skill;
	}

	/**
	 * Generates and Returns {@link ProfessionalSkill} Object with specified Id.
	 * 
	 * @param id Id for the Object.
	 * @return ProfessionalSkill Object.
	 */
	public static ProfessionalSkill getProfessionalSkill(Long id) {
		ProfessionalSkill skill = getProfessionalSkill();
		skill.setId(id);
		return skill;
	}

	/**
	 * Generates and Returns {@link ProfessionalSkill} Object with specified name
	 * and Proficiency
	 * 
	 * @param name        Name of Skill
	 * @param proficiency Proficiency about the skill
	 * @return ProfessionalSkill Object.
	 */
	public static ProfessionalSkill getProfessionalSkill(String name, Proficiency proficiency) {
		ProfessionalSkill skill = new ProfessionalSkill(name, proficiency);
		skill.setId(CommonUtils.getRandomLong());
		return skill;
	}

	/**
	 * Generates and Returns List of {@link ProfessionalSkill} Objects. List will be
	 * generated by using professional-skills-list.json
	 * 
	 * @return List of ProfessionalSkill Objects.
	 */
	public static List<ProfessionalSkill> getProfessionalSkillList() {
		ProfessionalSkill[] skills = {};
		try {
			skills = mapper.readValue(CommonUtils.getFileContent("json-files/professional-skills-list.json"),
					ProfessionalSkill[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of ProfessionalSkill Objects", e);
		}

		return Arrays.asList(skills);
	}

	/**
	 * Generates and returns the {@link Technology} Object. Generated Object will
	 * not have id.
	 * 
	 * @return {@link Technology} Object.
	 */
	public static Technology getTechnology() {
		Technology technology = new Technology();
		technology.setName("Java");
		technology.setVersion("1.8");
		return technology;
	}

	/**
	 * Generates and returns the {@link Technology} Object with provided id.
	 * 
	 * @param id Id for Technology Object
	 * @return {@link Technology} Object
	 */
	public static Technology getTechnology(Long id) {
		Technology technology = getTechnology();
		technology.setId(id);
		return technology;
	}

	/**
	 * Generates and returns the {@link Technology} Object with provided name and
	 * version.
	 * 
	 * @param name    Name of the Technology
	 * @param version Version of Technology
	 * @return Technology Object
	 */
	public static Technology getTechnology(String name, String version) {
		Technology technology = new Technology(name, version);
		technology.setId(CommonUtils.getRandomLong());
		return technology;
	}

	/**
	 * Generates and returns List of Technology Objects. Objects are generated by
	 * using the json file(technologies-list.json).
	 * 
	 * @return List of Technology Objects
	 */
	public static List<Technology> getTechnologyList() {
		Technology[] technologies = {};
		try {
			technologies = mapper.readValue(CommonUtils.getFileContent("json-files/technologies-list.json"),
					Technology[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of Technology Objects", e);
		}

		return Arrays.asList(technologies);
	}

	/**
	 * Generates and returns the {@link ProjectDetail} Object without id.
	 * 
	 * @return {@link ProjectDetail} Object.
	 */
	public static ProjectDetail getProjectDetail() {
		ProjectDetail project = new ProjectDetail();
		project.setProjectName("Client Project - 1");
		project.setTeamSize(7);
		project.setStartDate(LocalDate.of(2020, 01, 06));
		project.setEndDate(LocalDate.of(2020, 07, 15));
		project.setDescription("Project to develop Web Applications");
		project.setTechnologies(getTechnologyList());

		return project;
	}

	/**
	 * Generates and Returns the {@link ProjectDetail} object with specified Id.
	 * 
	 * @param id Id of the Project Entity
	 * @return {@link ProjectDetail} Object
	 */
	public static ProjectDetail getProjectDetail(Long id) {
		ProjectDetail project = getProjectDetail();
		project.setId(id);
		return project;
	}

	/**
	 * Generates and Returns the {@link ProjectDetail} object with specified project
	 * name, team size, role name, start date, end date and description. Generated
	 * ProjectDetail object will also have Technology list.
	 * 
	 * @param projectName Name of Project.
	 * @param teamSize    Size of Team.
	 * @param roleName    Role played in the team.
	 * @param startDate   Start date of Project.
	 * @param endDate     End Date of Project.
	 * @param description Description about the Project.
	 * @return
	 */
	public static ProjectDetail getProjectDetail(String projectName, int teamSize, String roleName, LocalDate startDate,
			LocalDate endDate, String description) {
		ProjectDetail project = new ProjectDetail(projectName, teamSize, roleName, startDate, endDate, description);
		project.setTechnologies(getTechnologyList());
		return project;
	}

	/**
	 * Generates and Returns List of ProjectDetail Objects. Objects will be
	 * generated by using the JSON file (project-details.json).
	 * 
	 * @return List of ProjectDetail Objects
	 */
	public static List<ProjectDetail> getProjectDetailList() {
		ProjectDetail[] projects = {};
		try {
			projects = mapper.readValue(CommonUtils.getFileContent("json-files/project-details.json"),
					ProjectDetail[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of ProjectDetail Objects", e);
		}

		return Arrays.asList(projects);
	}

	/**
	 * Generates and returns the {@link WorkExperience} Object without id.
	 * 
	 * @return WorkExperience Object
	 */
	public static WorkExperience getWorkExperience() {
		WorkExperience workExperience = new WorkExperience();
		workExperience.setIsCurrentOrganization(true);
		workExperience.setEndDate(null);
		workExperience.setOrganizationName("Company Name - 1");
		workExperience.setStartDate(LocalDate.of(2019, 03, 8));
		workExperience.setProjects(getProjectDetailList());

		return workExperience;
	}

	/**
	 * Generates and returns the {@link WorkExperience} Object with specified Id.
	 * 
	 * @param id Id for WorkExperience Object.
	 * @return WorkExperience Object.
	 */
	public static WorkExperience getWorkExperience(Long id) {
		WorkExperience workExperience = getWorkExperience();
		workExperience.setId(id);
		return workExperience;
	}

	/**
	 * Generates and Returns List of WorkExperience Objects. Objects will be
	 * generated by using the JSON file (work_exp-list.json).
	 * 
	 * @return List of WorkExperience Objects.
	 * 
	 */
	public static List<WorkExperience> getWorkExperienceList() {
		WorkExperience[] workExperiences = {};
		try {
			workExperiences = mapper.readValue(CommonUtils.getFileContent("json-files/work_exp-list.json"),
					WorkExperience[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of WorkExperience Objects", e);
		}
		return Arrays.asList(workExperiences);
	}

	/**
	 * Generates and returns the {@link ProfessionalInfo} Object without id.
	 * 
	 * @return ProfessionalInfo Object
	 */
	public static ProfessionalInfo getProfessionalInfo() {
		ProfessionalInfo professionalInfo = new ProfessionalInfo();
		professionalInfo.setCurrentOrganization("Company Name -1");
		professionalInfo.setDesignation("Senior Software Engineer");
		professionalInfo.setRelevantExperience(12);
		professionalInfo.setTotalExperience(49);
		professionalInfo.setEducationalDetails(getEducationDetailList());
		professionalInfo.setProfessionalSkills(getProfessionalSkillList());
		professionalInfo.setWorkExperiences(getWorkExperienceList());

		return professionalInfo;
	}

	/**
	 * Generates and returns the {@link ProfessionalInfo} Object with specified id.
	 * 
	 * @param id Id for the ProfessionalInfo Object
	 * @return ProfessionalInfo Object
	 */
	public static ProfessionalInfo getProfessionalInfo(Long id) {
		ProfessionalInfo professionalInfo = getProfessionalInfo();
		professionalInfo.setId(CommonUtils.getRandomLong());
		return professionalInfo;
	}

	/**
	 * Generates and Returns List of ProfessionalInfo Objects. Objects will be
	 * generated by using the JSON file (professional_info-list.json).
	 * 
	 * @return List of ProfessionalInfo Objects
	 */
	public static List<ProfessionalInfo> getProfessionalInfoList() {
		ProfessionalInfo[] professionalInfos = {};
		try {
			professionalInfos = mapper.readValue(CommonUtils.getFileContent("json-files/professional_info-list.json"),
					ProfessionalInfo[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of ProfessionalInfo Objects", e);
		}
		return Arrays.asList(professionalInfos);
	}

	/**
	 * Generates and returns the {@link PersonalProfessionalInfoPayload} Object
	 * without id.
	 * 
	 * @return PersonalProfessionalInfoPayload Object.
	 */
	public static PersonalProfessionalInfoPayload getPersonalProfessionalInfoPayload() {
		PersonalProfessionalInfoPayload payload = new PersonalProfessionalInfoPayload();
		payload.setPerson(getPerson());
		payload.setProfessionalInfo(getProfessionalInfo());

		return payload;
	}

	/**
	 * Generates and returns the {@link PersonalProfessionalInfoPayload} Object with
	 * specified Id.
	 * 
	 * @param id Id for PersonalProfessionalInfoPayload Object
	 * @return PersonalProfessionalInfoPayload Object.
	 */
	public static PersonalProfessionalInfoPayload getPersonalProfessionalInfoPayload(Long id) {
		PersonalProfessionalInfoPayload payload = getPersonalProfessionalInfoPayload();
		payload.getPerson().setId(id);
		payload.getProfessionalInfo().setId(id);

		return payload;
	}

	/**
	 * Generates and Returns List of ProfessionalInfo Objects. Objects will be
	 * generated by using the JSON file (personal-professional-info.json).
	 * 
	 * @return List of PersonalProfessionalInfoPayload Objects
	 */
	public static List<PersonalProfessionalInfoPayload> getPersonalProfessionalInfoPayloadList() {
		PersonalProfessionalInfoPayload[] payload = {};
		try {
			payload = mapper.readValue(CommonUtils.getFileContent("json-files/personal-professional-info.json"),
					PersonalProfessionalInfoPayload[].class);
		} catch (JsonProcessingException e) {
			logger.error("Exception Occurred while generating the List of PersonalProfessionalInfoPayload Objects", e);
		}
		return Arrays.asList(payload);
	}
}
