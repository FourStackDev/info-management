package org.fourstack.infomanagement.exceptionhandling;

import java.time.LocalDateTime;

import org.fourstack.infomanagement.codetype.CustErrCodesAndMsgs;
import org.fourstack.infomanagement.payload.ErrorResponse;
import org.fourstack.infomanagement.services.ErrorResponseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

/**
 * Exception Handler class to handle the exceptions that are raised through out
 * the appliaction. <br/>
 * Acts as Centralized Exception handler to handle the exceptions
 * 
 * @author Manjunath_HM
 *
 */
@ControllerAdvice
public class InfoManagementExceptionHandler extends ResponseEntityExceptionHandler {
	
	@Autowired
	private ErrorResponseService errorResponseService;
	
	/**
	 * Exception Handler method to handle InvalidDataAccessApiUsageException.
	 * <p>
	 * Whenever the InvalidDataAccessApiUsageException occurred, then ErrorResponse will be
	 * generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = InvalidDataAccessApiUsageException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(InvalidDataAccessApiUsageException exception, 
			WebRequest request) {

		ErrorResponse response = new ErrorResponse();
		setCustomValues(response, CustErrCodesAndMsgs.UNABLE_TO_SAVE_ENTITY_CODE, 
				CustErrCodesAndMsgs.UNABLE_TO_SAVE_ENTITY_MSG,
				exception.getMessage(), request.getDescription(false));

		setExceptionValues(response, HttpStatus.UNPROCESSABLE_ENTITY.value(), exception.getMessage(), HttpStatus.UNPROCESSABLE_ENTITY);
		saveErrorResponseToDB(response);
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.UNPROCESSABLE_ENTITY);
	}
		
	/**
	 * Exception Handler method to handle DataIntegrityViolationException.
	 * <p>
	 * Whenever the DataIntegrityViolationException occurred, then ErrorResponse will be
	 * generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = DataIntegrityViolationException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(DataIntegrityViolationException exception, 
			WebRequest request) {

		ErrorResponse response = new ErrorResponse();
		setCustomValues(response, CustErrCodesAndMsgs.UNIQUE_CONSTRAINT_VIOLATION_CODE, 
				CustErrCodesAndMsgs.UNIQUE_CONSTRAINT_VIOLATION_MSG,
				exception.getMessage(), request.getDescription(false));
		
		setExceptionValues(response, HttpStatus.CONFLICT.value(), exception.getMessage(), HttpStatus.CONFLICT);
		saveErrorResponseToDB(response);
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.CONFLICT);
	}
	
	/**
	 * Exception Handler method to handle UniqueConstraintViolationException.
	 * <p>
	 * Whenever the UniqueConstraintViolationException occurred, then ErrorResponse will be
	 * generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = UniqueConstraintViolationException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(UniqueConstraintViolationException exception, 
			WebRequest request) {

		ErrorResponse response = new ErrorResponse();
		setCustomValues(response, CustErrCodesAndMsgs.UNIQUE_CONSTRAINT_VIOLATION_CODE, 
				CustErrCodesAndMsgs.UNIQUE_CONSTRAINT_VIOLATION_MSG,
				exception.getCustErrorMsg(), request.getDescription(false));
		
		setExceptionValues(response, HttpStatus.CONFLICT.value(), exception.getMessage(), HttpStatus.CONFLICT);
		saveErrorResponseToDB(response);
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.CONFLICT);
	}	
	
	/**
	 * Exception Handler method to handle RequestedEntityNotFoundException.
	 * <p>
	 * Whenever the RequestedEntityNotFoundException occurred, then ErrorResponse will be
	 * generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = RequestedEntityNotFoundException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(RequestedEntityNotFoundException exception,
			WebRequest request) {
		ErrorResponse response = new ErrorResponse();
		setCustomValues(response, CustErrCodesAndMsgs.REQUESTED_ENTITY_NOT_FOUND_CODE, 
				CustErrCodesAndMsgs.REQUESTED_ENTITY_NOT_FOUND_MSG, 
				exception.getMessage(), request.getDescription(false));
		
		setExceptionValues(response, HttpStatus.NOT_FOUND.value(), exception.getMessage(), HttpStatus.NOT_FOUND);
		saveErrorResponseToDB(response);
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.NOT_FOUND);
	}
	
	/**
	 * Used to set custom values like CustomErrorCode, CustomErrorMessage,
	 * CustomDescription and URI
	 * 
	 * @param response        ErrorResponse Object to set values
	 * @param code            Custom Error Code
	 * @param msg             Custom Error Message
	 * @param custDescription Custom Description
	 * @param uri             URI details
	 * @return ErrorResponse Object
	 */
	private ErrorResponse setCustomValues(ErrorResponse response, CustErrCodesAndMsgs code, CustErrCodesAndMsgs msg,
			String custDescription, String uri) {
		response.setCustomErrorCode(code);
		response.setCustomErrorMsg(msg);
		response.setCustomErrorDescription(custDescription);
		
		response.setUrlDetails(uri);
		response.setTimeStamp(LocalDateTime.now());

		return response;
	}
	
	/**
	 * Used to set exception related values like response code, error message and
	 * HttpStatus
	 * 
	 * @param response     ErrorResponse Object to set values
	 * @param errorCode    Response code for the exception
	 * @param errorMessage Error Message from the exception (cause for the
	 *                     exception)
	 * @param status       HttpStatus for Exception
	 * @return ErrorResponse Object
	 */
	private ErrorResponse setExceptionValues(ErrorResponse response, int errorCode, String errorMessage, HttpStatus status) {
		response.setErrorCode(errorCode);
		response.setErrorMsg(errorMessage);
		response.setStatus(status);
		
		
		return response;
	}

	/**
	 * To save the error response to the Database.
	 * 
	 * @param response ErrorResponse Object
	 */
	private void saveErrorResponseToDB(ErrorResponse response) {
		errorResponseService.saveErrorResponse(response);
	}

}
